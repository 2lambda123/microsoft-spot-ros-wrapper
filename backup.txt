#include <ros/ros.h>
#include <ros/console.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Float32.h>

void sensor_callback(const std_msgs::Float32 &value) {
	ROS_DEBUG("Received the message: Value= %d", value);
}

void compute_sensor_val(geometry_msgs::Float32 sensor, geometry_msgs::Float32 source, std_msgs::Float32 &value) {
	float distance = get_distance(sensor, source);
	value.data = 1 / distance;
}

int main(int argc, char **argv) {

	ros::init(argc, argv, "sim");
	ros::NodeHandle n;

	ros::Publisher source_pub = n.advertise<std_msgs::Float32>("counter", 100);
	ros::Publisher sensor_pub = n.advertise<std_msgs::Float32>("another_counter", 100);
	ros::Subscriber sensor_pos_sub = n.subscribe("test_msg_from_python", 100, sensor_callback);

	// Running at 10Hz
	ros::Rate loop_rate(10);
	int count = 0;
	ros::spinOnce();

	while (ros::ok()) {

		source_pub.publish(count);
		sensor_pub.publish(count*2);

		std_msgs::Float32 sensor_val;

		ros::spinOnce();
		loop_rate.sleep();
		++count;
	}

	return 0;
}